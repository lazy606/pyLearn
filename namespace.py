# 命名空间
'''
有三种命名空间:
    内置名称，python语言内置的名称，比如函数名abs、char和异常名称BaseException、Exception
    全局名称: 模块中定义的名称，记录在模块的变量，包括函数、类、其他导入的模块、模块几的变量和常量
    局部名称： 函数中定义的名称，记录函数的变量，包括函数的参数和局部定义的变量。
命名空间查找顺序: 局部的命名空间 -> 全局命名空间 -> 内置命名空间
命名空间的生命周期：命名空间的生命周期屈居于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束
所以就能理解了，内置名称就是python解释器这个对象命名空间中的名称，全局名称就是python模块对象命名空间中的名称，局部就是类或者函数中的名称
'''

# 作用域
'''
作用域就是一个Python程序可以直接访问命名空间的正文区域。
在一个python程序中，直接访问一个变量，会从内到外依次访问所有的作用域知道找到，否则报未定义错误。
python中，程序的变量并不是在那个位置都可以访问，访问权限去定于这个变量在哪里赋值。
有四种作用域：
    L（Local）：最内层，包含局部变量，比如一个函数/方法内部。
    E（Enclosing）：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。
    G（Global）：当前脚本的最外层，比如当前模块的全局变量。
    B（Built-in）： 包含了内建的变量/关键字等，最后被搜索。
规则顺序: L -> E -> G -> B
'''

'''
内置作用域是通过名为builtin的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，必须导入文件才能使用它
Python只有模块、类以及函数才会引入新的作用域，其它的代码块是不会引入新的作用域的，也就是说这些语句定义的变量外部可访问
'''

# 全局变量和局部变量
'''
不要想死记硬背对象这些都是竹篮打水，不是一场空
定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。
'''

# global和nonlocal关键字
'''
当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字
这些关键字相当于取 其他作用域的变量
'''

'''
错误信息为局部作用域引用错误，因为 test 函数中的 a 使用的是局部，未定义，无法修改。
'''
a = 10


def test():
    a = a + 1  # a在作用域内没有赋值就没有定义
    print(a)


test()
