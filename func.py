# 定义一个函数
'''
函数代码块以def关键词开头，后接标识符名称和圆括号()
任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数
函数的第一行语句可以选择性的使用文档字符串用于存放函数说明
函数内容以冒号：其实，并且缩进
return【表达式】结束函数，选择性地返回一个值给调用方，不带表达式的return相当于返回None
'''

# 参数传递
'''
在python中，类型属于对象，对象有不同类型的区分，变量是没有类型的
a = [1, 2, 3]
a = "Runoob"
以上代码中，[1, 2, 3]是List类型， "Runoob"是String类型，而变量a是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向List类型对象，也可以是指向String类型对象
'''

# 可更改与不可更改对象(mutable与immutable)
'''
在python中，strings，tuples和numbers是不可更改的对象，而list、dict等则是可以修改的对象
    不可变类型：变量赋值a=5后再赋值a=10,这里实际新生成了一个int对象10，再让a指向它，而5被丢弃，不是改变a的值，相当于新生成了a
    可变类型：变量赋值la=[1, 2, 3, 4]后再赋值la[2] = 5则是将la的第三个元素值更改，la本身没有动，只是其内部的一部分值被修改了
python函数的参数传递：
    不可变类型：类似C++的值传递，如整数、字符串、元组。如fun(a),传递的只是a的值，没有影响a对象本身。如果再fun(a)内部修改a的值，则是新生成一个a对象
    可变类型：类似C++中的引用传递，例如列表、字典。如fun(la)，则是将la真正的传过去，修改后fun外部的la也会受影响。
python中一切都是对象，严格意义我们不能说值传递还是引用传递
'''

# 参数
'''
调用函数是可使用的正式参数类型：
必需参数
关键字参数
默认参数
不定长参数
'''


# 必需参数,必须以正确的顺序传入函数。调用时的数量必须和声明时的一样

# 关键字参数，关键字参数和函数调用关系精密，函数调用使用关键字阐述来确定传入的参数值，使用关键字参数允许函数调用时参数的顺序与声明时不一致

# 默认参数，调用函数时如果没有传递参数，则会使用默认参数。
def print_info(name, age=35):
    """打印任何传入的字符串"""
    print("名字：", name)
    print("年龄：", age)


print_info(age=50, name="runoob")
print("---------------------")
print_info(name="runoob")

# 不定长参数，可能需要一个函数能处理比当初声明更多的参数，这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名
'''
def function_name([formal_args,] *var_args_tuple):加了*号的参数会以元组的形式导入，存放所有未命名的变量参数
'''


def print_info2(arg1, *var_tuple):  # 如果再函数调用时没有指定参数，他就是空元组，我们也可以不想函数传递命名变量
    '''打印任何传入的参数'''
    print("输出：")
    print(arg1)
    print(var_tuple)


'''
还有一种就是参数带两个星号**
def function_name([formal_args,]**var_args_dic)
加了两个星号**的参数会以字典的形式导入,可变参数一定要带名字否则会报错
'''

'''
声明函数时，参数中*可以单独出现，如果单独出现星号*，则星号后的参数必须使用关键字传入
'''

# 匿名函数
'''
Python使用lambda来创建匿名函数
所谓匿名，即不在使用def标准来定义一个函数
·lambda只是一个表达式，函数体比def简单很多
·lambda的主题是一个表达时，而不是代码块。仅仅能在lambda中封装进有限的逻辑
·lambda函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的函数
·虽然lambda函数看起来只能写一行，却不同于C或者C++的内联函数，后者的目的是调用小函数不占用栈内存从而增加运行效率
语法：lambda [arg1[,arg2,...argn]]:express
我们可以将匿名参数封装再一个函数内，这样可以使用同样的代码来创建多个匿名函数
'''
x = lambda a: a + 10
print(x(5))

# return语句
'''
return语句用于退出函数，选择性地想调用放返回一个表达式。
'''

# 强制位置参数
'''
Python3.8中新增了一个函数形参语法/用来知名函数形参必须使用指定位置参数，不能使用关键字参数形式
def (a, b, /, c, d, e, f)
形参a和b必须使用位置参数， c或d可以是位置形参或关键词形参，而e和f要求关键字形参
'''
